<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="e1a2105d-7011-41c5-8b69-92053a64be4c" activeEnvironment="Default" name="Produtividade" resourceRoot="" soapui-version="5.4.0" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:restMockService id="b3807bd9-376d-4079-b497-535534cd618a" port="8082" path="/" host="mdomingospw701" name="Produtividade" docroot=""><con:settings/><con:properties/><con:restMockAction name="total-by-phase" method="GET" resourcePath="/s2m-project-productivity-management/v1/total-by-phase" id="d0bbd9d1-af30-4527-8318-f759928a4dac"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="Response 1" id="360edf72-d98d-4486-8d4d-d40c6dda38e0" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{ "phaseList": [{ "phase": "RNs Estimativa Inicial", "done": 21, "inProgress": 0, "backlog": 31, "pending": 2, "total": 54 }, { "phase": "DDRs Aprovados (segunda medição)", "done": 78, "inProgress": 22, "backlog": 3, "pending": 15, "total": 118 }, { "phase": "Aferições - Waterfall", "done": 133, "inProgress": 29, "backlog": 1, "pending": 83, "total": 246 }, { "phase": "Aferições – Agile", "done": 3, "inProgress": 0, "backlog": 0, "pending": 0, "total": 3 } ], "listTotals": { "phase": "Visão Geral do Escritório de Métricas", "done": 235, "inProgress": 51, "backlog": 35, "pending": 100, "total": 421}}</con:responseContent><con:header><con:name>Access-Control-Allow-Origin</con:name><con:value>*</con:value></con:header><con:header><con:name>Content-Type</con:name><con:value>aplication/json;charset=UTF-8</con:value></con:header></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>